import torch
device = 'cuda' if torch.cuda.is_available() else 'cpu'


train_y =  torch.tensor([[-1.3443e-01, -1.4387e-01, -1.7140e-01,  5.6541e-02, -1.4188e-01,
         -1.7447e-01, -1.5900e-01, -1.4157e-01, -4.4631e-02, -1.7569e-01,
         -1.6089e-01, -1.6978e-01, -1.7503e-01, -1.6808e-01, -1.6315e-01,
          3.3892e-01, -1.7591e-01, -1.7016e-01, -1.7727e-01, -1.7371e-01,
         -1.6457e-01, -1.6027e-01, -1.1306e-01, -1.7347e-01, -1.7527e-01,
         -3.3769e-02, -1.7615e-01, -1.6415e-01,  4.4522e+00, -1.3266e-01,
         -1.7644e-01, -1.4126e-01, -1.7579e-01, -1.3291e-01, -1.6824e-01,
         -1.5150e-01, -1.1823e-02,  5.2388e-02, -1.7322e-01, -1.6537e-01,
         -1.5089e-01, -1.7346e-01, -1.7750e-01, -1.3237e-01,  9.5540e+00,
         -1.7578e-01, -1.7050e-01, -1.6183e-01,  5.9551e-02, -1.7589e-01,
         -1.7559e-01, -1.6190e-01, -1.7446e-01, -1.7256e-01, -1.7359e-01,
          4.6911e-01, -1.6678e-01, -1.7570e-01, -1.5596e-01, -1.7564e-01,
         -1.5841e-01, -9.7964e-02, -1.6514e-01, -1.7488e-01, -1.6462e-01,
         -1.2975e-01, -1.0911e-01, -1.7716e-01, -1.7617e-01, -1.6604e-01,
         -2.9038e-02, -9.8117e-02, -1.7699e-01, -1.3726e-01, -1.7712e-01,
         -7.5740e-02, -1.7426e-01, -1.3565e-01, -1.4654e-01,  1.1401e-01,
          3.3877e-02, -1.7649e-01, -1.5336e-01, -1.7211e-01, -1.6956e-01,
         -1.7207e-01, -1.7263e-01, -1.4619e-01, -1.2035e-01, -1.7095e-01,
         -1.6985e-01, -6.0114e-03, -1.4016e-01, -1.7620e-01, -2.9602e-02,
         -1.6401e-01, -1.6910e-01, -1.7457e-01,  2.6201e-01, -1.7177e-01,
         -1.0933e-01, -1.7164e-01, -1.7494e-01, -1.6646e-01,  4.8815e-03,
         -1.7591e-01, -1.6412e-01,  1.0714e-02, -9.7544e-02, -1.6865e-01,
         -1.2626e-01, -8.6194e-02, -1.7548e-01, -1.7213e-01, -3.3462e-02]]).to(device)
train_x = torch.tensor([[ 6.0928e-01,  3.7949e-01],
        [ 5.6268e-01,  2.5494e-01],
        [ 1.2347e+00, -9.0592e-02],
        [-6.5013e-01,  6.4064e-01],
        [-1.5057e+00,  1.5929e+00],
        [-1.1090e+00,  1.8821e+00],
        [-5.8660e-01, -5.5665e-01],
        [-1.3236e+00, -1.8705e+00],
        [-1.1090e+00,  1.8821e+00],
        [ 7.8717e-01, -5.3657e-01],
        [ 9.2695e-01, -4.0800e-01],
        [-6.8120e-01, -8.3790e-01],
        [ 1.0583e+00, -3.9996e-01],
        [ 9.4248e-01, -8.9013e-01],
        [ 1.4606e+00,  1.1509e+00],
        [-1.0243e+00,  6.7680e-01],
        [-1.4606e+00, -1.8865e+00],
        [-3.5222e-01, -1.6693e-01],
        [ 8.0977e-01, -5.9683e-01],
        [ 1.1839e+00, -1.9907e-01],
        [-1.6752e+00,  2.6297e-01],
        [-9.6358e-01, -1.7660e+00],
        [ 7.6741e-01, -1.2273e-01],
        [ 1.1896e+00, -8.9415e-01],
        [ 1.1938e+00, -4.9639e-01],
        [-1.1090e+00,  1.8821e+00],
        [ 7.9423e-01, -5.0041e-01],
        [-5.4315e-02,  4.3975e-01],
        [-9.8617e-01,  1.8058e+00],
        [-1.4468e-01,  2.9110e-01],
        [-1.1090e+00,  1.8821e+00],
        [-6.9532e-01, -8.7004e-01],
        [ 1.0667e+00, -9.1825e-01],
        [-9.0851e-01,  8.5358e-01],
        [-9.9040e-01, -7.7361e-01],
        [-9.3675e-01, -8.4995e-01],
        [-1.1076e+00,  1.8902e+00],
        [-1.0656e-01,  1.1107e+00],
        [ 5.7257e-01,  1.1469e+00],
        [ 1.1896e+00, -6.0085e-01],
        [-5.7954e-01,  5.3216e-01],
        [ 1.0667e+00, -7.3344e-01],
        [-6.3037e-01, -2.2481e+00],
        [-1.6709e+00,  2.3083e-01],
        [-9.7769e-01,  1.8179e+00],
        [ 1.1543e+00, -4.1603e-01],
        [ 1.0611e+00, -4.5621e-01],
        [ 6.9964e-01,  8.9778e-01],
        [-4.0729e-01, -8.2585e-01],
        [-9.7769e-01, -7.9772e-01],
        [ 2.0946e+00,  1.9665e+00],
        [ 7.0952e-01,  4.5583e-01],
        [-1.1090e+00,  1.8821e+00],
        [ 9.3260e-01, -8.7808e-01],
        [-7.7297e-01, -8.9013e-01],
        [-9.5260e-02,  8.3751e-01],
        [ 9.3401e-01,  3.1119e-01],
        [ 8.2953e-01, -8.3790e-01],
        [ 8.6059e-01,  9.8215e-01],
        [ 1.2404e+00,  1.2473e+00],
        [ 3.3254e-01,  6.0850e-01],
        [ 7.6741e-01, -2.2720e-01],
        [-1.0313e+00, -7.1737e-01],
        [-1.6752e+00, -8.7406e-01],
        [ 8.3094e-01,  7.2100e-01],
        [-1.0553e+00, -1.7781e+00],
        [-1.0949e+00, -1.7941e+00],
        [ 1.0427e+00,  3.6342e-01],
        [-1.6653e+00,  3.7145e-01],
        [-9.7911e-01, -4.6425e-01],
        [ 2.1609e-03,  6.0046e-01],
        [-6.6990e-01, -5.9281e-01],
        [ 1.3999e+00,  3.9556e-01],
        [-7.7156e-01,  2.8708e-01],
        [ 1.0526e+00, -3.1961e-01],
        [ 1.2150e+00,  1.1228e+00],
        [-1.0130e+00, -1.7700e+00],
        [ 7.6035e-01,  1.2235e-01],
        [ 9.7778e-01, -9.0218e-01],
        [ 6.1461e-02,  5.9243e-01],
        [-3.5787e-01,  7.5314e-01],
        [-1.2841e+00, -1.8705e+00],
        [-6.2896e-01, -5.6469e-01],
        [-1.3490e+00, -1.8705e+00],
        [-1.6752e+00,  2.9913e-01],
        [ 9.2978e-01,  5.8343e-03],
        [ 7.6882e-01, -3.6782e-01],
        [ 1.6171e-01,  5.6029e-01],
        [ 7.6882e-01, -2.2012e-03],
        [ 2.1694e+00,  2.3281e+00],
        [-8.7039e-01, -9.0218e-01],
        [-6.6425e-01,  7.6118e-01],
        [-3.1128e-01, -8.2986e-01],
        [ 8.0977e-01, -5.8880e-01],
        [-7.2779e-01,  4.5181e-01],
        [ 7.3917e-01,  1.9467e-01],
        [ 7.7023e-01, -3.9193e-01],
        [-9.6358e-01, -8.2183e-01],
        [-7.1085e-01,  5.1609e-01],
        [ 8.7754e-01,  1.7860e-01],
        [-6.8684e-01, -8.0576e-01],
        [ 1.2630e+00,  6.7278e-01],
        [ 9.2695e-01, -4.5219e-01],
        [-6.5296e-01, -5.7273e-01],
        [ 4.8362e-01,  4.2770e-01],
        [-1.5834e+00, -5.4432e-02],
        [-9.1343e-03,  5.7636e-01],
        [-3.6070e-01, -8.2986e-01],
        [-6.8826e-01, -7.4147e-01],
        [ 1.2277e+00, -1.7095e-01],
        [ 4.5962e-01,  1.0746e+00],
        [-7.3485e-01, -8.8209e-01],
        [ 8.0977e-01, -5.9281e-01],
        [ 1.8701e+00,  1.6612e+00],
        [ 6.1351e-01,  2.3485e-01]]).to(device)
hidden_layer_inducing_points = torch.tensor([[[ 0.9328, -0.2769],
         [-1.4303, -0.0154],
         [-0.4836, -0.6585],
         [ 0.2698,  0.9024],
         [-0.9976,  1.7864],
         [ 1.8685,  1.6620],
         [-0.6300, -0.0870],
         [-0.8747, -1.0399],
         [ 1.4040, -0.3167],
         [-1.2656, -0.5125],
         [ 1.6821,  1.1207],
         [-0.3700,  0.1203],
         [ 1.3747, -0.5342],
         [ 0.3338,  0.4236],
         [ 0.2501, -0.2513],
         [ 0.4972,  0.1479],
         [-1.8471, -0.9154],
         [-0.8260, -2.1454],
         [-0.7246, -0.7790],
         [-1.8494,  0.8359],
         [-0.2603, -0.0023],
         [-0.8648,  0.2443],
         [-0.8752,  0.3786],
         [ 1.0434, -0.1985],
         [-0.2667,  0.8276],
         [-0.5824, -0.6284],
         [ 1.7205,  0.7733],
         [ 0.4681,  0.6021],
         [ 0.2983,  0.5768],
         [ 0.9847, -0.5342],
         [ 1.6488,  1.3436],
         [ 0.2545,  0.3370],
         [ 1.8604,  1.6288],
         [-0.6834, -0.7917],
         [ 1.6823,  1.3500],
         [ 0.5714,  0.6313],
         [ 1.4819,  0.5197],
         [-1.3601,  1.8947],
         [-0.4661,  0.5350],
         [ 1.5892,  0.0176],
         [ 0.2694,  0.6088],
         [ 1.0713,  0.1018],
         [ 0.3314,  0.5399],
         [ 0.6093,  0.4136],
         [-0.9794,  1.8237],
         [-0.7006,  0.8124],
         [-0.7655,  2.1105],
         [ 1.4001,  0.5386],
         [ 0.3340,  0.6279],
         [ 1.4609,  1.1378],
         [ 1.4411, -0.0137],
         [ 1.4199, -0.5240],
         [ 1.4002, -0.2426],
         [ 1.7450,  0.6374],
         [ 0.1617,  0.7032],
         [-0.3378, -0.3147],
         [-1.4633, -1.8438],
         [-1.0466, -1.0452],
         [ 0.2440,  0.8921],
         [-1.4590, -1.9100],
         [-0.4055, -0.7475],
         [ 1.3473,  0.1582],
         [ 1.4839, -0.3371],
         [ 0.5445, -0.3421],
         [-0.2451,  0.9642],
         [ 0.5511, -0.2174],
         [ 0.5178, -0.4957],
         [-0.6514, -0.5004],
         [ 1.0677, -0.6394],
         [-1.3294,  1.5899]]]).to(device)
hidden_layer_variational_mean =torch.tensor([[ 2.7020e-02,  3.8835e-03,  1.3692e-03,  8.5902e-04, -2.3148e+00,
         -4.6644e-02,  2.0156e-02,  8.0926e-02,  1.6755e-02, -1.2731e-03,
         -1.2266e-13,  1.0218e-01,  1.9203e-05,  2.7797e-02,  6.4711e-05,
          4.0156e-02,  1.3244e-10,  6.7005e-02,  7.7436e-02,  1.1516e-10,
          1.5726e-02,  3.0827e-02,  3.2021e-02, -2.4094e-02, -1.3263e-03,
         -6.6163e-02, -5.9041e-10,  2.7617e-02,  7.8214e-04,  5.2349e-02,
         -1.6349e-10,  2.1580e-04, -3.6184e-03,  8.3628e-03,  7.1738e-11,
          9.1121e-03, -4.0673e-03, -2.0350e-05,  1.6835e-03,  3.1879e-07,
          4.0801e-02,  2.5401e-02, -3.1462e-04,  3.3968e-02, -6.1708e+00,
          1.0523e-01, -1.2082e-01,  1.0813e-02, -1.0556e-03, -5.4321e-03,
          2.4126e-04,  8.3650e-04, -5.5870e-04,  2.2909e-07,  1.3223e-02,
          4.1255e-02,  4.5134e-02,  1.6701e-01, -1.4612e-05,  5.7301e-03,
          1.2453e-01,  1.2101e-02,  5.9080e-05,  1.1545e-01, -3.6046e-03,
          5.7990e-03, -7.2359e-03,  2.2003e-02, -3.5811e-03, -8.1978e-05]]).to(device)

hidden_layer_mean_module_constant =  torch.tensor(0.5118).to(device)
hidden_layer_covar_module_outputscale = torch.tensor([0.0750]).to(device)
hidden_layer_covar_module_lengthscale = torch.tensor([[[0.0261, 0.9315]]]).to(device)
last_layer_inducing_points = torch.tensor([[[ 0.5575],
         [ 3.1573],
         [-0.8915],
         [ 1.2307],
         [-3.0461],
         [-1.6253],
         [-0.8187],
         [ 0.6359],
         [ 2.0426],
         [-2.4311],
         [-1.0101],
         [-0.0266],
         [ 0.5381],
         [-1.2570],
         [-2.5100],
         [ 0.0380],
         [ 1.5274],
         [-3.6236],
         [ 0.9618],
         [ 0.7634],
         [-0.6681],
         [-1.7377],
         [ 1.7568],
         [-0.7766],
         [ 2.5480],
         [-0.6968],
         [-0.9857],
         [ 2.3457],
         [ 0.8306],
         [ 0.2327],
         [-1.4537],
         [-1.8835],
         [-0.2002],
         [-1.1389],
         [-1.0391],
         [-1.5810],
         [ 0.8777],
         [-0.6649],
         [ 0.6948],
         [ 0.1683],
         [-0.3588],
         [ 0.3964],
         [ 0.9701],
         [ 0.3478],
         [ 2.6533],
         [ 0.4723],
         [ 0.6737],
         [-0.7123],
         [-1.1517],
         [-1.4538],
         [-0.2127],
         [-0.0460],
         [ 1.8702],
         [ 0.7994],
         [ 0.4311],
         [ 0.2891],
         [-0.3238],
         [-0.4555],
         [ 0.0746],
         [-0.5527],
         [ 0.2956],
         [ 0.4520],
         [-0.8066],
         [-1.0974],
         [-1.0325],
         [ 1.1061],
         [ 0.5643],
         [-0.6146],
         [ 0.6264],
         [ 0.2434]]]).to(device)
last_layer_variational_mean = torch.tensor([[-1.3600e+00, -7.1205e-06,  1.7245e+00, -8.4981e-01,  3.7549e-03,
          1.7720e+00, -2.8111e+00,  2.5782e-01, -3.5755e-01, -6.7107e-02,
          5.5732e-01,  3.0286e-01, -4.1975e-02, -8.7006e-02,  1.5708e-02,
         -2.0604e-02, -1.1533e-01,  7.9216e-03, -1.5652e-01,  4.1573e-02,
         -1.3695e-01,  2.3682e-02,  2.1638e-02,  5.8906e-04, -4.5335e-03,
         -1.6788e-02,  1.4740e-02, -1.5529e-02, -1.2005e-02, -6.3451e-02,
          2.5934e-03,  1.3163e-02, -2.3731e-02,  1.2913e-02,  9.5669e-03,
         -2.4084e-03, -1.7666e-02, -1.3966e-02,  1.2806e-02, -7.4918e-03,
         -2.6196e-02, -1.7012e-03, -1.2685e-02, -4.1531e-03, -8.6257e-03,
          7.1918e-03,  1.0668e-02, -2.0587e-03,  6.8587e-03, -8.8612e-04,
          1.0253e-03,  1.0895e-02,  7.3741e-03, -4.3784e-03,  2.5374e-03,
         -9.6275e-03, -9.4275e-03, -9.1013e-03,  1.4709e-03, -3.4698e-03,
         -7.4008e-03,  5.4838e-03,  1.4350e-03,  3.8565e-03,  2.6242e-04,
          3.2409e-03,  1.1979e-02,  1.1033e-03,  7.8068e-03, -6.4729e-03]]).to(device)
last_layer_mean_module_constant = torch.tensor(3.1578).to(device)
last_layer_covar_module_outputscale = torch.tensor([5.8029]).to(device)
last_layer_covar_module_lengthscale = torch.tensor([[[0.5144]]]).to(device)
likelihood_noise = torch.tensor([0.0083]).to(device)
std_dev_pred = torch.tensor([[0.1330, 0.1329, 0.1329, 0.1327, 0.1327, 0.1452, 0.1321, 0.1318, 0.1319,
         0.1323, 0.1321, 0.1317, 0.1323, 0.1317, 0.1325, 0.1328, 0.1332, 0.1319,
         0.1323, 0.1350, 0.1319, 0.1390, 0.1319, 0.1332, 0.1320, 0.1326, 0.1322,
         0.1318, 0.1866, 0.1315, 0.1357, 0.1338, 0.1328, 0.1326, 0.1324, 0.1362,
         0.1320, 0.1325, 0.1322, 0.1319, 0.1334, 0.1323, 0.1315, 0.1319, 0.2105,
         0.1319, 0.1318, 0.1319, 0.1325, 0.1324, 0.1328, 0.1331, 0.1329, 0.1316,
         0.1322, 0.1324, 0.1386, 0.1319, 0.1326, 0.1322, 0.1320, 0.1321, 0.1317,
         0.1320, 0.1317, 0.1330, 0.1319, 0.1331, 0.1365, 0.1355, 0.1318, 0.1316,
         0.1322, 0.1332, 0.1333, 0.1345, 0.1320, 0.1421, 0.1318, 0.1336, 0.1315,
         0.1318, 0.1333, 0.1321, 0.1321, 0.1321, 0.1318, 0.1330, 0.1323, 0.1320,
         0.1324, 0.1336, 0.1331, 0.1536, 0.1322, 0.1331, 0.1340, 0.1322, 0.1321,
         0.1326, 0.1322, 0.1334, 0.1322, 0.1322, 0.1319, 0.1558, 0.1323, 0.1329,
         0.1321, 0.1347, 0.1321, 0.1322, 0.1433, 0.1326, 0.1329]],).to(device)
predicted_y = torch.tensor([[-1.1698e-01, -1.1538e-01, -1.1800e-01, -1.1762e-01, -1.1747e-01,
         -1.1150e-01, -1.1639e-01, -1.1552e-01, -1.1240e-01, -1.1507e-01,
         -1.1648e-01, -1.1497e-01, -1.1435e-01, -1.1438e-01, -1.1870e-01,
         -1.1694e-01, -1.1727e-01, -1.1525e-01, -1.1616e-01, -1.2142e-01,
         -1.1270e-01, -1.1691e-01, -1.1508e-01, -1.2160e-01, -1.1668e-01,
         -1.1681e-01, -1.1597e-01, -1.1296e-01,  5.1368e+00, -1.1570e-01,
         -1.0614e-01, -1.2255e-01, -1.1842e-01, -1.1540e-01, -1.1854e-01,
         -1.1355e-01, -1.1505e-01, -1.1518e-01, -1.1593e-01, -1.1436e-01,
         -1.1628e-01, -1.1849e-01, -1.1585e-01, -1.1692e-01,  9.9478e+00,
         -1.1379e-01, -1.1317e-01, -1.1348e-01, -1.1766e-01, -1.1639e-01,
         -1.1903e-01, -1.1899e-01, -1.2023e-01, -1.1603e-01, -1.1773e-01,
         -1.1778e-01, -7.9359e-02, -1.1767e-01, -1.2149e-01, -1.1758e-01,
         -1.1781e-01, -1.1342e-01, -1.1601e-01, -1.1429e-01, -1.1376e-01,
         -1.1722e-01, -1.1689e-01, -1.1728e-01, -1.1763e-01, -1.1637e-01,
         -1.1395e-01, -1.1536e-01, -1.1484e-01, -1.1645e-01, -1.1659e-01,
         -1.1785e-01, -1.1448e-01, -8.7380e-03, -1.1267e-01, -1.1980e-01,
         -1.1389e-01, -1.1486e-01, -1.2076e-01, -1.1601e-01, -1.1674e-01,
         -1.1541e-01, -1.1681e-01, -1.1804e-01, -1.1834e-01, -1.1569e-01,
         -1.1700e-01, -1.2180e-01, -1.2045e-01, -1.0704e-01, -1.1599e-01,
         -1.1589e-01, -1.2188e-01, -1.1521e-01, -1.1592e-01, -1.1901e-01,
         -1.1644e-01, -1.2297e-01, -1.1537e-01, -1.1688e-01, -1.1381e-01,
         -1.0651e-01, -1.1448e-01, -1.1939e-01, -1.1684e-01, -1.2157e-01,
         -1.1451e-01, -1.1520e-01, -3.1655e-02, -1.1847e-01, -1.1954e-01]]).to(device)
inducing_num_fix = hidden_layer_inducing_points.size(-2)
print(inducing_num_fix)